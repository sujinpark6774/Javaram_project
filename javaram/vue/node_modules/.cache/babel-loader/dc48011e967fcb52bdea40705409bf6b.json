{"ast":null,"code":"import Stomp from 'webstomp-client';\nimport SockJS from 'sockjs-client';\nexport default {\n  name: 'ChatRoom',\n\n  data() {\n    return {\n      userName: \"\",\n      message: \"\",\n      recvList: [],\n      textData: []\n    };\n  },\n\n  created() {\n    this.connect();\n  },\n\n  methods: {\n    sendMessage(e) {\n      if (e.keyCode === 13 && this.userName !== '' && this.message !== '') {\n        this.send();\n        this.message = '';\n      }\n    },\n\n    send() {\n      console.log(\"Send message:\" + this.message);\n\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = {\n          userName: this.userName,\n          content: this.message\n        };\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\n      }\n    },\n\n    connect() {\n      const serverURL = \"http://localhost:8085\";\n      let socket = new SockJS(serverURL);\n      this.stompClient = Stomp.over(socket);\n      console.log(`소켓 연결 시도. 서버 주소: ${serverURL}`);\n      this.stompClient.connect({}, frame => {\n        // 소켓 연결 성공\n        this.connected = true;\n        console.log('소켓 연결 성공', frame);\n        this.stompClient.subscribe(\"/send\", res => {\n          console.log('메시지 내용.', res.body);\n          this.recvList.push(JSON.parse(res.body));\n        });\n      }, error => {\n        // 소켓 연결 실패\n        console.log('소켓 연결 실패', error);\n        this.connected = false;\n      });\n    },\n\n    exportTextFile() {\n      const text = document.getElementById('text-data').value; // 저장하고자하는 파일명\n\n      const filename = '텍스트파일명';\n      const element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(text));\n      element.setAttribute('download', filename);\n      document.body.appendChild(element);\n      element.click();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA8EA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,eAAe;AACbC,MAAI,EAAE,UADO;;AAEbC,MAAI,GAAG;AACL,WAAO;AACLC,cAAQ,EAAE,EADL;AAELC,aAAO,EAAE,EAFJ;AAGLC,cAAQ,EAAE,EAHL;AAILC,cAAQ,EAAE;AAJL,KAAP;AAMD,GATY;;AAUbC,SAAO,GAAG;AACR,SAAKC,OAAL;AACD,GAZY;;AAcbC,SAAO,EAAE;AACPC,eAAU,CAAGC,CAAH,EAAM;AACd,UAAGA,CAAC,CAACC,OAAF,KAAc,EAAd,IAAoB,KAAKT,QAAL,KAAkB,EAAtC,IAA4C,KAAKC,OAAL,KAAiB,EAAhE,EAAmE;AACjE,aAAKS,IAAL;AACA,aAAKT,OAAL,GAAe,EAAf;AAEF;AACD,KAPM;;AAQPS,QAAI,GAAG;AACLC,aAAO,CAACC,GAAR,CAAY,kBAAkB,KAAKX,OAAnC;;AACA,UAAI,KAAKY,WAAL,IAAoB,KAAKA,WAAL,CAAiBC,SAAzC,EAAoD;AAClD,cAAMC,GAAE,GAAI;AACVf,kBAAQ,EAAE,KAAKA,QADL;AAEVgB,iBAAO,EAAE,KAAKf;AAFJ,SAAZ;AAIA,aAAKY,WAAL,CAAiBH,IAAjB,CAAsB,UAAtB,EAAkCO,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAlC,EAAuD,EAAvD;AACF;AACD,KAjBM;;AAkBPV,WAAO,GAAG;AACR,YAAMc,SAAQ,GAAI,uBAAlB;AACA,UAAIC,MAAK,GAAI,IAAIvB,MAAJ,CAAWsB,SAAX,CAAb;AACA,WAAKN,WAAL,GAAmBjB,KAAK,CAACyB,IAAN,CAAWD,MAAX,CAAnB;AACAT,aAAO,CAACC,GAAR,CAAa,oBAAmBO,SAAU,EAA1C;AACA,WAAKN,WAAL,CAAiBR,OAAjB,CACE,EADF,EAEEiB,KAAI,IAAK;AACP;AACA,aAAKR,SAAL,GAAiB,IAAjB;AACAH,eAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,KAAxB;AAEA,aAAKT,WAAL,CAAiBU,SAAjB,CAA2B,OAA3B,EAAoCC,GAAE,IAAK;AACzCb,iBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBY,GAAG,CAACC,IAA3B;AACA,eAAKvB,QAAL,CAAcwB,IAAd,CAAmBT,IAAI,CAACU,KAAL,CAAWH,GAAG,CAACC,IAAf,CAAnB;AACD,SAHD;AAID,OAXH,EAYEG,KAAI,IAAK;AACP;AACAjB,eAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBgB,KAAxB;AACA,aAAKd,SAAL,GAAiB,KAAjB;AACF,OAhBF;AAkBD,KAzCM;;AA2CPe,kBAAc,GAAG;AACf,YAAMC,IAAG,GAAIC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,KAAlD,CADe,CAEf;;AACA,YAAMC,QAAO,GAAI,QAAjB;AACA,YAAMC,OAAM,GAAIJ,QAAQ,CAACK,aAAT,CAAuB,GAAvB,CAAhB;AACAD,aAAO,CAACE,YAAR,CAAqB,MAArB,EAA6B,oCAAoCC,kBAAkB,CAACR,IAAD,CAAnF;AACAK,aAAO,CAACE,YAAR,CAAqB,UAArB,EAAiCH,QAAjC;AACAH,cAAQ,CAACN,IAAT,CAAcc,WAAd,CAA0BJ,OAA1B;AACAA,aAAO,CAACK,KAAR;AACF;;AApDO;AAdI,CAAf","names":["Stomp","SockJS","name","data","userName","message","recvList","textData","created","connect","methods","sendMessage","e","keyCode","send","console","log","stompClient","connected","msg","content","JSON","stringify","serverURL","socket","over","frame","subscribe","res","body","push","parse","error","exportTextFile","text","document","getElementById","value","filename","element","createElement","setAttribute","encodeURIComponent","appendChild","click"],"sourceRoot":"","sources":["C:\\eclipse_portable\\WORKSPACE\\javaram\\vue\\src\\components\\conference\\page\\ChatRoom.vue"],"sourcesContent":["<template>\r\n  <table>\r\n\r\n    <tr>\r\n      <td colspan=\"2\"> \r\n        <!-- 아이디 입력 군간 추후 삭제 예정 -->\r\n        <div><input v-model=\"userName\" type=\"text\" size = 10 placeholder=\"ID입력 추후 삭제\"></div>\r\n          <div style=\"height:100px;\">\r\n        <!-- txt 파일 불러오기 버튼 -->\r\n        <button @click=\"importTextFile\">불러오기</button>\r\n        <!-- txt 파일 저장하기 버튼 -->\r\n        <button @click=\"exportTextFile\">저장</button>\r\n        <!-- <textarea id=\"text-data\" v-model=\"textData\"></textarea> -->\r\n        \r\n  </div>\r\n       </td>\r\n    </tr>\r\n\r\n    <tr>\r\n      <td class=\"table_list\">\r\n        \r\n        <div class=\"main_left1\">\r\n          참가자 목록 \r\n        <div class=\"main_left2\">\r\n        신현아 <br>\r\n        김용호 <br>\r\n        황규진 <br>\r\n        서동민 <br>\r\n        임지호 <br>\r\n        </div>\r\n        </div> \r\n      </td>\r\n      \r\n      <!-- 채팅방 -->\r\n      <td class=\"table_chat\">\r\n        \r\n        <div class=\"main_right\">\r\n          <div class=\"chat_right\">\r\n            <!-- 아이디 확인(구별하기 위해) 아이디>>실제 아이디 값으로 변경-->\r\n            <div v-for=\"(item, idx) in recvList\" :key=\"idx\">\r\n                <div v-if=\"item.userName !== '아이디'\" class=\"other\">{{ item.userName }} : {{ item.content }}</div>\r\n                <div v-else class=\"me\">{{ item.content }} </div>\r\n                \r\n           \r\n\r\n                <!-- <textData class=\"append\" id =\"text-data\">{{ name }}: {{ value }}</textData> \r\n                </div> -->\r\n\r\n                <!-- textData에 입력만!  -->\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"form\">\r\n            <input class=\"form__input\" type=\"text\" placeholder=\"메세지를 입력하세요.\" v-model=\"message\" @keyup=\"sendMessage\">\r\n            <!-- <div @click=\"submitMessage\" class=\"form__submit\"> -->\r\n\r\n              <!-- 보내기 아이콘 비행기 영역 -->\r\n              <svg width=\"30\" height=\"30\" viewBox=\"0 0 68 68\" fill=\"#CCCCCC\" >\r\n                <g clip-path=\"url(#clip0_26_10)\">\r\n                  <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\r\n                    d=\"M48.0833 19.799C48.619 20.3347 48.806 21.127 48.5665 21.8457L35.8385 60.0294C35.5946 60.7614 34.9513 61.2877 34.1855 61.382C33.4198 61.4763 32.6681 61.1217 32.2539 60.4707L22.593 45.2893L7.41158 35.6285C6.76065 35.2142 6.40604 34.4625 6.50031 33.6968C6.59458 32.931 7.12092 32.2878 7.85287 32.0438L46.0366 19.3159C46.7553 19.0763 47.5476 19.2633 48.0833 19.799ZM26.5903 44.1204L33.3726 54.7782L42.0926 28.6181L26.5903 44.1204ZM39.2642 25.7897L23.7619 41.292L13.1041 34.5097L39.2642 25.7897Z\"\r\n                    fill=\"\"/>\r\n                </g>\r\n                <defs>\r\n                  <clipPath id=\"clip0_26_10\">\r\n                    <rect width=\"48\" height=\"48\" fill=\"white\" transform=\"translate(33.9412) rotate(45)\"/>\r\n                  </clipPath>\r\n                </defs>\r\n              </svg>    \r\n          </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </table>\r\n  \r\n</template>\r\n\r\n<script>\r\nimport Stomp from 'webstomp-client'\r\nimport SockJS from 'sockjs-client'\r\n\r\nexport default {\r\n  name: 'ChatRoom',\r\n  data() {\r\n    return {\r\n      userName: \"\",\r\n      message: \"\",\r\n      recvList: [],\r\n      textData: []\r\n    }\r\n  },\r\n  created() {\r\n    this.connect()\r\n  },\r\n\r\n  methods: {\r\n    sendMessage (e) {\r\n      if(e.keyCode === 13 && this.userName !== '' && this.message !== ''){\r\n        this.send()\r\n        this.message = ''\r\n        \r\n      }\r\n    },    \r\n    send() {\r\n      console.log(\"Send message:\" + this.message);\r\n      if (this.stompClient && this.stompClient.connected) {\r\n        const msg = { \r\n          userName: this.userName,\r\n          content: this.message \r\n        };\r\n        this.stompClient.send(\"/receive\", JSON.stringify(msg), {});\r\n      }\r\n    },    \r\n    connect() {\r\n      const serverURL = \"http://localhost:8085\"\r\n      let socket = new SockJS(serverURL);\r\n      this.stompClient = Stomp.over(socket);\r\n      console.log(`소켓 연결 시도. 서버 주소: ${serverURL}`)\r\n      this.stompClient.connect(\r\n        {},\r\n        frame => {\r\n          // 소켓 연결 성공\r\n          this.connected = true;\r\n          console.log('소켓 연결 성공', frame);\r\n  \r\n          this.stompClient.subscribe(\"/send\", res => {\r\n            console.log('메시지 내용.', res.body);\r\n            this.recvList.push(JSON.parse(res.body))\r\n          });\r\n        },\r\n        error => {\r\n          // 소켓 연결 실패\r\n          console.log('소켓 연결 실패', error);\r\n          this.connected = false;\r\n        }\r\n      );        \r\n    },\r\n\r\n    exportTextFile() {\r\n      const text = document.getElementById('text-data').value;\r\n      // 저장하고자하는 파일명\r\n      const filename = '텍스트파일명';\r\n      const element = document.createElement('a');\r\n      element.setAttribute('href', 'data:text/plain;charset=utf-8, ' + encodeURIComponent(text));\r\n      element.setAttribute('download', filename);\r\n      document.body.appendChild(element);\r\n      element.click();\r\n    }\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.form {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 1.4rem;\r\n  background: #ffffff;\r\n  border-radius: 30px 30px 24px 24px;\r\n  border: solid aquamarine;\r\n  box-shadow: 0px -5px 30px rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.form__input {\r\n  border: none;\r\n  padding: 0.5rem;\r\n  font-size: 16px;\r\n  width: calc(100% - 60px);\r\n  padding: 5px;\r\n}\r\n\r\n.form__input:focus {\r\n  outline: none;\r\n}\r\n\r\n.form__submit {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n}\r\n\r\nsvg {\r\n  transition: 0.3s;\r\n}\r\n\r\nsvg:hover {\r\n  fill: #999999;\r\n}\r\n\r\n\r\n/* 해당 영역 채팅 배경 */\r\n\r\n/* 메인 */\r\n\r\n.main_left1 {\r\n  margin: auto;\r\n  /* margin-top: 5%;\r\n  margin-bottom: 5%;\r\n  margin-left: 40%; */\r\n  border-radius: 20px;\r\n  background-color: aquamarine;\r\n  text-align: center;\r\n  width: 90%;\r\n  height: 95%;\r\n  font-size: 25px;\r\n  padding: 8px;\r\n}\r\n.main_left2 {\r\n  margin: auto;\r\n  border-radius: 10px;\r\n  background-color: white;\r\n  text-align: left;\r\n  width: 85%;\r\n  height: 90%;\r\n  border: solid aquamarine;\r\n  padding: 15px;\r\n  font-size: 20px;\r\n}\r\n\r\n.main_right {\r\n  margin: auto;\r\n  border-radius: 20px;\r\n  background-color: aquamarine;\r\n  text-align: center;\r\n  width: 90%;\r\n  height: 95%;\r\n  padding: 10px;\r\n}\r\n\r\n\r\n/* 채팅 영역 */\r\n.chat_right {\r\n  height: 90%;\r\n  width: 100%;\r\n  overflow-y: auto;\r\n}\r\n\r\n\r\n.table_list {\r\n  width: 500px;\r\n  height: 900px;\r\n}\r\n\r\n.table_chat {\r\n  width: 1200px;\r\n  height: 900px;\r\n}\r\n\r\n\r\n\r\n/* 접속 알림 */\r\n.connect {\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: aquamarine; /*색깔은 추후에 변경*/\r\n  font-weight: bold; /*글자 굵게*/\r\n  text-align: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* 접속 종료 알림 */\r\n.disconnect {\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: a;\r\n  font-weight: bold; /*글자 굵게*/\r\n  text-align: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* 내가 보낸 메시지 */\r\n.me {\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: lemonchiffon;\r\n  text-align: right;\r\n  border-radius: 5px;\r\n  margin-top: 10px;\r\n  font-size: 23px;\r\n}\r\n\r\n/* 상대방이 보낸 메시지 */\r\n.other {\r\n  width: 90%;\r\n  margin: auto;\r\n  background-color: white;\r\n  text-align: left;\r\n  border-radius: 5px;\r\n  margin-top: 10px;\r\n  font-size: 23px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}
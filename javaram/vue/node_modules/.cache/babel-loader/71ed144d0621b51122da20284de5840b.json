{"ast":null,"code":"import AuthService from '../services/auth.service';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(user => {\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, error => {\n        commit('loginFailure');\n        return Promise.reject(error);\n      });\n    },\n\n    logout({\n      commit\n    }) {\n      AuthService.logout();\n      commit('logout');\n    },\n\n    register({\n      commit\n    }, user) {\n      return AuthService.register(user).then(response => {\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }, error => {\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n\n  }\n};","map":{"version":3,"sources":["C:/eclipse_portable/WORKSPACE/javaram/vue/src/store/auth.module.js"],"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","actions","login","commit","then","Promise","resolve","error","reject","logout","register","response","data","mutations","loginSuccess","loginFailure","registerSuccess","registerFailure"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,0BAAxB;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACA,MAAMC,YAAY,GAAGL,IAAI,GACrB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA8BP,EAAAA;AAA9B,CADqB,GAErB;AAAEM,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAV;AAA+BP,EAAAA,IAAI,EAAE;AAArC,CAFJ;AAGA,OAAO,MAAMQ,IAAI,GAAG;AAClBC,EAAAA,UAAU,EAAE,IADM;AAElBC,EAAAA,KAAK,EAAEL,YAFW;AAGlBM,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,CAAC;AAAEC,MAAAA;AAAF,KAAD,EAAab,IAAb,EAAmB;AACtB,aAAOD,WAAW,CAACa,KAAZ,CAAkBZ,IAAlB,EAAwBc,IAAxB,CACLd,IAAI,IAAI;AACNa,QAAAA,MAAM,CAAC,cAAD,EAAiBb,IAAjB,CAAN;AACA,eAAOe,OAAO,CAACC,OAAR,CAAgBhB,IAAhB,CAAP;AACD,OAJI,EAKLiB,KAAK,IAAI;AACPJ,QAAAA,MAAM,CAAC,cAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACD,OARI,CAAP;AAUD,KAZM;;AAaPE,IAAAA,MAAM,CAAC;AAAEN,MAAAA;AAAF,KAAD,EAAa;AACjBd,MAAAA,WAAW,CAACoB,MAAZ;AACAN,MAAAA,MAAM,CAAC,QAAD,CAAN;AACD,KAhBM;;AAiBPO,IAAAA,QAAQ,CAAC;AAAEP,MAAAA;AAAF,KAAD,EAAab,IAAb,EAAmB;AACzB,aAAOD,WAAW,CAACqB,QAAZ,CAAqBpB,IAArB,EAA2Bc,IAA3B,CACLO,QAAQ,IAAI;AACVR,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACC,OAAR,CAAgBK,QAAQ,CAACC,IAAzB,CAAP;AACD,OAJI,EAKLL,KAAK,IAAI;AACPJ,QAAAA,MAAM,CAAC,iBAAD,CAAN;AACA,eAAOE,OAAO,CAACG,MAAR,CAAeD,KAAf,CAAP;AACD,OARI,CAAP;AAUD;;AA5BM,GAHS;AAiClBM,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,CAACd,KAAD,EAAQV,IAAR,EAAc;AACxBU,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,IAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAaA,IAAb;AACD,KAJQ;;AAKTyB,IAAAA,YAAY,CAACf,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACD,KARQ;;AASTmB,IAAAA,MAAM,CAACT,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACAG,MAAAA,KAAK,CAACV,IAAN,GAAa,IAAb;AACD,KAZQ;;AAaT0B,IAAAA,eAAe,CAAChB,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD,KAfQ;;AAgBToB,IAAAA,eAAe,CAACjB,KAAD,EAAQ;AACrBA,MAAAA,KAAK,CAACJ,MAAN,CAAaC,QAAb,GAAwB,KAAxB;AACD;;AAlBQ;AAjCO,CAAb","sourcesContent":["import AuthService from '../services/auth.service';\nconst user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user\n  ? { status: { loggedIn: true }, user }\n  : { status: { loggedIn: false }, user: null };\nexport const auth = {\n  namespaced: true,\n  state: initialState,\n  actions: {\n    login({ commit }, user) {\n      return AuthService.login(user).then(\n        user => {\n          commit('loginSuccess', user);\n          return Promise.resolve(user);\n        },\n        error => {\n          commit('loginFailure');\n          return Promise.reject(error);\n        }\n      );\n    },\n    logout({ commit }) {\n      AuthService.logout();\n      commit('logout');\n    },\n    register({ commit }, user) {\n      return AuthService.register(user).then(\n        response => {\n          commit('registerSuccess');\n          return Promise.resolve(response.data);\n        },\n        error => {\n          commit('registerFailure');\n          return Promise.reject(error);\n        }\n      );\n    }\n  },\n  mutations: {\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}
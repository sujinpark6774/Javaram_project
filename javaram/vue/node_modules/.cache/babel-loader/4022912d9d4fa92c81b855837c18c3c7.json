{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"list-group\"\n};\nconst _hoisted_2 = [\"onUpdate:modelValue\"];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"ul\", _hoisted_1, [_createElementVNode(\"h6\", null, \"clickdateD: \" + _toDisplayString(_ctx.clickdateD), 1\n  /* TEXT */\n  ), _createElementVNode(\"h6\", null, \"date: \" + _toDisplayString(this.date), 1\n  /* TEXT */\n  ), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.todos, (todo, idx) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: idx\n    }, [_createCommentVNode(\" <input type=\\\"checkbox\\\" v-model=\\\"todo.check\\\" @click=\\\"TodoDetail()\\\"> \"), _withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => todo.check = $event\n    }, null, 8\n    /* PROPS */\n    , _hoisted_2), [[_vModelCheckbox, todo.check]]), _createTextVNode(\" \" + _toDisplayString(todo.title), 1\n    /* TEXT */\n    )]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;AACQA,OAAK,EAAC;;;;uBAAVC,oBAWK,IAXL,cAWK,CATDC,oBAAqC,IAArC,EAAqC,IAArC,EAAI,iBAAYC,iBAAGC,eAAH,CAAhB,EAA6B;AAAA;AAA7B,GASC,EARDF,oBAA8B,IAA9B,EAA8B,IAA9B,EAAI,WAAMC,sBAAQE,IAAR,CAAV,EAAsB;AAAA;AAAtB,GAQC,qBANDJ,oBAIMK,SAJN,EAIM,IAJN,EAIMC,YAJoBH,UAIpB,EAJyB,CAAlBI,IAAkB,EAAbC,GAAa,KAAV;yBAArBR,oBAIM,KAJN,EAIM;AAJ4BS,SAAG,EAAED;AAIjC,KAJN,EAA0C,CACtCE,iGADsC,kBAEtCT,oBAA4C,OAA5C,EAA4C;AAArCU,UAAI,EAAC,UAAgC;uCAAZJ,IAAI,CAACK,QAAKC;AAAE,KAA5C;;AAAA,sCAAgCN,IAAI,CAACK,QAFC,mBAEM,MACxCV,iBAAGK,IAAI,CAACO,KAAR,GAAa;AAAA;KAHqB,CAA1C;GAIM,CAJN;;AAAA,GAMC,EAXL","names":["class","_createElementBlock","_createElementVNode","_toDisplayString","_ctx","date","_Fragment","_renderList","todo","idx","key","_createCommentVNode","type","check","$event","title"],"sourceRoot":"","sources":["C:\\eclipse_portable\\WORKSPACE\\javaram\\vue\\src\\components\\todo\\component\\TodoList.vue"],"sourcesContent":["<template>\r\n    <ul class=\"list-group\">\r\n\r\n        <h6>clickdateD: {{ clickdateD }}</h6>\r\n        <h6>date: {{ this.date }}</h6>\r\n\r\n        <div v-for=\"(todo,idx) in todos\" :key=\"idx\">\r\n            <!-- <input type=\"checkbox\" v-model=\"todo.check\" @click=\"TodoDetail()\"> -->\r\n            <input type=\"checkbox\" v-model=\"todo.check\">\r\n                {{ todo.title }}\r\n        </div>\r\n\r\n    </ul>\r\n\r\n</template>\r\n\r\n\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n// import { computed } from '@vue/runtime-core';\r\n\r\n\r\nexport default {\r\n    name: \"todoList\",\r\n\r\n    props: {\r\n        // Calendar에서 선택한 날짜 받음\r\n        clickdateD: String\r\n    },\r\n  \r\n    data() {\r\n        return {\r\n            todos: [],\r\n            user: \"sujin\",               // 로그인 정보 가져와야함\r\n            // date: \"2022-03-25\"\r\n            datedata: \"\",\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        clickdateD(clickdateD) {\r\n            fetch(`/${clickdateD}`).then((data) =>\r\n                this.\r\n\r\n            )\r\n        }\r\n    },\r\n\r\n    // setup(props) {\r\n    //   const date = computed(() => {\r\n    //     return props.clickdateD;\r\n    //   });\r\n    //   return { date }  \r\n    // },\r\n\r\n    methods:{\r\n        \r\n        // Todo 데이터(user, date 기준) 가져오기\r\n        TodoListUD(){\r\n\r\n            axios\r\n                .get(\"/todo/detail?user=\" + this.user + \"&tododate=\" + this.date)\r\n                .then(response => {\r\n                    console.log(response.data);\r\n                    this.todos = response.data;\r\n                })\r\n                .catch(e => {\r\n                    console.log(e);\r\n                })\r\n        },\r\n\r\n        // Todo 선택시 내용 표시\r\n        // TodoDetail(){\r\n\r\n        // },\r\n\r\n\r\n    },\r\n\r\n    mounted() {\r\n        this.TodoListUD();\r\n    },\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}
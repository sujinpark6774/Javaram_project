{"ast":null,"code":"import { Form, Field, ErrorMessage } from \"vee-validate\";\nimport * as yup from \"yup\";\nimport axios from 'axios';\nexport default {\n  name: \"RegisterPage\",\n  components: {\n    Form,\n    Field,\n    ErrorMessage\n  },\n\n  data() {\n    const schema = yup.object().shape({\n      username: yup.string().required(\"Username is required!\").min(3, \"Must be at least 3 characters!\").max(20, \"Must be maximum 20 characters!\"),\n      id: yup.string().matches(/[a-zA-Z0-9]/g, \"You only insert alphabet or number!\").required(\"Id is required!\").min(6, \"Must be at least 6 characters!\").max(40, \"Must be maximum 40 characters!\"),\n      email: yup.string().required(\"Email is required!\").email(\"Email is invalid!\").max(50, \"Must be maximum 50 characters!\"),\n      password: yup.string().required(\"Password is required!\").min(6, \"Must be at least 6 characters!\").max(40, \"Must be maximum 40 characters!\")\n    });\n    return {\n      successful: false,\n      loading: false,\n      message: \"\",\n      schema\n    };\n  },\n\n  methods: {\n    handleRegister(user) {\n      this.message = \"\";\n      this.successful = false;\n      this.loading = true;\n      this.$store.dispatch(\"auth/register\", user).then(data => {\n        this.message = data.message;\n        this.successful = true;\n        this.loading = false;\n      }, error => {\n        this.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        this.successful = false;\n        this.loading = false;\n      });\n    },\n\n    submit() {\n      axios.post('/insertUser', {\n        user_id: this.user_id,\n        user_name: this.user_name,\n        user_pw: this.user_pw,\n        user_email: this.user_email\n      }).then(response => {\n        if (response.status) {\n          alert(\"회원가입에 성공하셨습니다.\");\n          this.$router.push('/login');\n        } else {\n          alert(\"회원가입에 실패하셨습니다. 다시 시도해주십시오.\");\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"AA4EA,SAASA,IAAT,EAAeC,KAAf,EAAsBC,YAAtB,QAA0C,cAA1C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACXC,MAAI,EAAE,cADK;AAGXC,YAAU,EAAE;AACRN,QADQ;AAERC,SAFQ;AAGRC;AAHQ,GAHD;;AASXK,MAAI,GAAG;AACH,UAAMC,MAAK,GAAIL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;AAC9BC,cAAQ,EAAER,GAAE,CACPS,MADK,GAELC,QAFK,CAEI,uBAFJ,EAGLC,GAHK,CAGD,CAHC,EAGE,gCAHF,EAILC,GAJK,CAID,EAJC,EAIG,gCAJH,CADoB;AAM9BC,QAAE,EAAEb,GAAE,CACDS,MADD,GAECK,OAFD,CAES,cAFT,EAEyB,qCAFzB,EAGCJ,QAHD,CAGU,iBAHV,EAICC,GAJD,CAIK,CAJL,EAIQ,gCAJR,EAKCC,GALD,CAKK,EALL,EAKS,gCALT,CAN0B;AAY9BG,WAAK,EAAEf,GAAE,CACJS,MADE,GAEFC,QAFE,CAEO,oBAFP,EAGFK,KAHE,CAGI,mBAHJ,EAIFH,GAJE,CAIE,EAJF,EAIM,gCAJN,CAZuB;AAiB9BI,cAAQ,EAAEhB,GAAE,CACPS,MADK,GAELC,QAFK,CAEI,uBAFJ,EAGLC,GAHK,CAGD,CAHC,EAGE,gCAHF,EAILC,GAJK,CAID,EAJC,EAIG,gCAJH;AAjBoB,KAAnB,CAAf;AAuBA,WAAO;AACHK,gBAAU,EAAE,KADT;AAEHC,aAAO,EAAE,KAFN;AAGHC,aAAO,EAAE,EAHN;AAIHd;AAJG,KAAP;AAMH,GAvCU;;AAyCXe,SAAO,EAAE;AACLC,kBAAc,CAACC,IAAD,EAAO;AACjB,WAAKH,OAAL,GAAe,EAAf;AACA,WAAKF,UAAL,GAAkB,KAAlB;AACA,WAAKC,OAAL,GAAe,IAAf;AACA,WAAKK,MAAL,CAAYC,QAAZ,CAAqB,eAArB,EAAsCF,IAAtC,EAA4CG,IAA5C,CACKrB,IAAD,IAAU;AACN,aAAKe,OAAL,GAAef,IAAI,CAACe,OAApB;AACA,aAAKF,UAAL,GAAkB,IAAlB;AACA,aAAKC,OAAL,GAAe,KAAf;AACH,OALL,EAMKQ,KAAD,IAAW;AACP,aAAKP,OAAL,GACKO,KAAK,CAACC,QAAN,IACGD,KAAK,CAACC,QAAN,CAAevB,IADlB,IAEGsB,KAAK,CAACC,QAAN,CAAevB,IAAf,CAAoBe,OAFxB,IAGAO,KAAK,CAACP,OAHN,IAIAO,KAAK,CAACE,QAAN,EALJ;AAMA,aAAKX,UAAL,GAAkB,KAAlB;AACA,aAAKC,OAAL,GAAe,KAAf;AACJ,OAfJ;AAiBH,KAtBI;;AAwBLW,UAAM,GAAG;AACL5B,WAAK,CAAC6B,IAAN,CAAW,aAAX,EAA0B;AACtBC,eAAO,EAAE,KAAKA,OADQ;AAEtBC,iBAAS,EAAE,KAAKA,SAFM;AAGtBC,eAAO,EAAE,KAAKA,OAHQ;AAItBC,kBAAU,EAAE,KAAKA;AAJK,OAA1B,EAKGT,IALH,CAKQE,QAAO,IAAK;AAChB,YAAIA,QAAQ,CAACQ,MAAb,EAAqB;AACjBC,eAAK,CAAC,gBAAD,CAAL;AACA,eAAKC,OAAL,CAAaC,IAAb,CAAkB,QAAlB;AACJ,SAHA,MAGO;AACHF,eAAK,CAAC,4BAAD,CAAL;AACJ;AACH,OAZD,EAYGG,KAZH,CAYSC,GAAE,IAAK;AACZC,eAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,OAdD;AAeJ;;AAxCK;AAzCE,CAAf","names":["Form","Field","ErrorMessage","yup","axios","name","components","data","schema","object","shape","username","string","required","min","max","id","matches","email","password","successful","loading","message","methods","handleRegister","user","$store","dispatch","then","error","response","toString","submit","post","user_id","user_name","user_pw","user_email","status","alert","$router","push","catch","err","console","log"],"sourceRoot":"","sources":["C:\\eclipse_portable\\WORKSPACE\\javaram\\vue\\src\\components\\common\\component\\modal\\ModalRegist.vue"],"sourcesContent":["<template>\r\n\r\n  <!-- Modal -->\r\n  <div class=\"modal fade\" id=\"registModal\" tabindex=\"-1\" aria-labelledby=\"registModalLabel\" aria-hidden=\"true\">\r\n      <div class=\"modal-dialog d-flex flex-column-reverse\">\r\n          <div class=\"p-2\">\r\n\r\n              <!-- 모달 창 전체 -->\r\n              <div class=\"modal-content\">\r\n\r\n                  <div class=\"modal-header\">\r\n\r\n                      <div id=\"regist_tab\">\r\n                          <h3 id=\"regist_title\">Regist</h3>\r\n                      </div>\r\n\r\n                      <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                  </div>\r\n\r\n                  <!-- 클릭한 요소에 따라 컴포넌트 전환 -->\r\n                  <div class=\"modal-body\">\r\n                    <div class=\"regist-content\">\r\n                        \r\n                    <Form @submit=\"handleRegister\" :validation-schema=\"schema\">\r\n                        <div v-if=\"!successful\">\r\n                        <div class=\"form-group\">\r\n                            <label for=\"id\">ID</label>\r\n                            <Field name=\"id\" type=\"text\" class=\"form-control\" v-model=\"user_id\" />\r\n                            <ErrorMessage name=\"id\" class=\"error-feedback\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"username\">Name</label>\r\n                            <Field name=\"username\" type=\"username\" class=\"form-control\" v-model=\"user_name\" />\r\n                            <ErrorMessage name=\"username\" class=\"error-feedback\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"password\">Password</label>\r\n                            <Field name=\"password\" type=\"password\" class=\"form-control\" autocomplete=\"off\" v-model=\"user_pw\" />\r\n                            <ErrorMessage name=\"password\" class=\"error-feedback\" />\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"email\">Email</label>\r\n                            <Field name=\"email\" type=\"email\" class=\"form-control\" v-model=\"user_email\" />\r\n                            <ErrorMessage name=\"email\" class=\"error-feedback\" />\r\n                        </div>\r\n\r\n                        <div class=\"form-group\" id=\"buttons\">\r\n                            <button type=\"button\" class=\"btn btn-primary\" @click=\"submit\" id=\"button_signup\">가입</button>\r\n\r\n                            <router-link to=\"/login\">\r\n                                <button type=\"button\" class=\"btn btn-secondary\" id=\"button_cancel\">취소</button>\r\n                            </router-link>\r\n                        </div>\r\n                        </div>\r\n                    </Form>\r\n\r\n                    <div\r\n                        v-if=\"message\"\r\n                        class=\"alert\"\r\n                        :class=\"successful ? 'alert-success' : 'alert-danger'\"\r\n                    >\r\n                        {{ message }}\r\n                    </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n\r\n              </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { Form, Field, ErrorMessage } from \"vee-validate\";\r\nimport * as yup from \"yup\";\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: \"RegisterPage\",\r\n\r\n    components: {\r\n        Form,\r\n        Field,\r\n        ErrorMessage,\r\n    },\r\n\r\n    data() {\r\n        const schema = yup.object().shape({\r\n            username: yup\r\n                .string()\r\n                .required(\"Username is required!\")\r\n                .min(3, \"Must be at least 3 characters!\")\r\n                .max(20, \"Must be maximum 20 characters!\"),\r\n            id: yup\r\n                .string()\r\n                .matches(/[a-zA-Z0-9]/g, \"You only insert alphabet or number!\")\r\n                .required(\"Id is required!\")\r\n                .min(6, \"Must be at least 6 characters!\")\r\n                .max(40, \"Must be maximum 40 characters!\"),\r\n            email: yup\r\n                .string()\r\n                .required(\"Email is required!\")\r\n                .email(\"Email is invalid!\")\r\n                .max(50, \"Must be maximum 50 characters!\"),\r\n            password: yup\r\n                .string()\r\n                .required(\"Password is required!\")\r\n                .min(6, \"Must be at least 6 characters!\")\r\n                .max(40, \"Must be maximum 40 characters!\"),\r\n        });\r\n        return {\r\n            successful: false,\r\n            loading: false,\r\n            message: \"\",\r\n            schema,\r\n        };\r\n    },\r\n\r\n    methods: {\r\n        handleRegister(user) {\r\n            this.message = \"\";\r\n            this.successful = false;\r\n            this.loading = true;\r\n            this.$store.dispatch(\"auth/register\", user).then(\r\n                (data) => {\r\n                    this.message = data.message;\r\n                    this.successful = true;\r\n                    this.loading = false;\r\n                },\r\n                (error) => {\r\n                    this.message =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n                    this.successful = false;\r\n                    this.loading = false;\r\n                }\r\n            );\r\n        },\r\n\r\n        submit() {\r\n            axios.post('/insertUser', {\r\n                user_id: this.user_id,\r\n                user_name: this.user_name,\r\n                user_pw: this.user_pw,\r\n                user_email: this.user_email\r\n            }).then(response => {\r\n                if (response.status) {\r\n                    alert(\"회원가입에 성공하셨습니다.\")\r\n                    this.$router.push('/login')\r\n                } else {\r\n                    alert(\"회원가입에 실패하셨습니다. 다시 시도해주십시오.\")\r\n                }\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n    },\r\n};\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n  @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap');\r\n\r\n    * {\r\n        font-family: 'Poppins', sans-serif;\r\n    }\r\n\r\n    h3 {\r\n        text-align: left;\r\n        margin-bottom: 0px;\r\n        color: black !important;\r\n    }\r\n\r\n    .form-group {\r\n        margin: 10px;\r\n    }\r\n\r\n    .label {\r\n        margin-bottom: 5px;\r\n    }\r\n\r\n    #regist_tab {\r\n        display: flex;\r\n        flex-direction: row;\r\n        flex:1;\r\n        border-left-style: solid;\r\n        border-left-width: 5px;\r\n        border-left-color: #00C9BE;\r\n    }\r\n\r\n    #regist_title {\r\n        margin-left: 15px;\r\n        align-self: center;\r\n        flex: 6;\r\n    }\r\n\r\n    #button_cancel {\r\n        margin-left: 5px;\r\n    }\r\n\r\n\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}
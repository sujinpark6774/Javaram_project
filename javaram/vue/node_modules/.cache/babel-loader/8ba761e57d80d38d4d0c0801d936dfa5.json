{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"accordion\",\n  id: \"accordionExample\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"accordion-item\\\"><h2 class=\\\"accordion-header\\\" id=\\\"headingOne\\\"><button class=\\\"accordion-button\\\" type=\\\"button\\\" data-bs-toggle=\\\"collapse\\\" data-bs-target=\\\"#collapseOne\\\" aria-expanded=\\\"true\\\" aria-controls=\\\"collapseOne\\\"> Accordion Item #1 </button></h2><div id=\\\"collapseOne\\\" class=\\\"accordion-collapse collapse show\\\" aria-labelledby=\\\"headingOne\\\" data-bs-parent=\\\"#accordionExample\\\"><div class=\\\"accordion-body\\\"><strong>This is the first item&#39;s accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It&#39;s also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow. </div></div></div>\", 1);\n\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;AACSA,OAAK,EAAC;AAAYC,IAAE,EAAC;;;;;oBACtBC;;uBADJC,oBAmBM,KAnBN,cAmBMC,UAnBN","names":["class","id","_hoisted_2","_createElementBlock","_hoisted_3"],"sourceRoot":"","sources":["C:\\eclipse_portable\\WORKSPACE\\javaram\\vue\\src\\components\\todo\\component\\TestPage.vue"],"sourcesContent":["<template>\r\n    <div class=\"accordion\" id=\"accordionExample\">\r\n        <div class=\"accordion-item\">\r\n            <h2 class=\"accordion-header\" id=\"headingOne\">\r\n                <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\"\r\n                    aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\"\r\n                data-bs-parent=\"#accordionExample\">\r\n                <div class=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse\r\n                    plugin adds the appropriate classes that we use to style each element. These classes control the\r\n                    overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of\r\n                    this with custom CSS or overriding our default variables. It's also worth noting that just about any\r\n                    HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>"]},"metadata":{},"sourceType":"module"}